import time
import random
import re
import unidecode
from twilio.rest import Client
from test_listing import title, category, description, price, location, min_price, seller_contact, image_url, available_slots, condition, year_model

# 🔴 Historique des échanges et confirmations
confirmed_deals = {}
scheduled_appointments = {}
user_conversations = {}

twilio_client = Client("TWILIO_ACCOUNT_SID", "TWILIO_AUTH_TOKEN")

# ✅ GESTION DES INFORMATIONS SUR L'ANNONCE
def handle_product_info(user_input):
    """Gère les questions sur l'année, le modèle et l'état du produit"""
    
    model_keywords = ["model", "which model", "what model", "which version", "product model", "which type", 
    "specs", "configuration", "technical details", "which specs", "what type", "what version",
    "which model is this", "can you tell me the model", "is this the latest model", 
    "is this an old model", "which version", "is it an updated model", 
    "does it have the latest features", "any special specs", "what are the features", 
    "does it have any upgrades", "which generation", "which series", "which brand", 
    "does it have high specs", "basic or pro model", "is it the standard version", 
    "is it the premium model", "does it come with advanced features", "is this the basic model",
    "which edition", "which build", "hardware specs", "what’s the exact model", 
    "is it a rare model", "is it a limited edition", "does it have a unique design",
    "does it come in different versions", "does it have extra features", 
    "does it support the latest software", "is it compatible with newer models",
    "does it match the latest trends", "does it have customizable features",
    "how powerful is it", "is it the high-end model", "does it come with extra accessories",
    "which one from the series", "is it the base model", "is it a special version",
    "is this an entry-level model", "what’s the model number", "does it have specific enhancements",
    "is it the flagship model", "does it have a performance boost",
    "is this a newer design", "does it have different color options", 
    "is it an international version", "is it an exclusive model"]
    year_keywords = ["year", "which year", "model year", "what year", "production year", "release year", "how old is it?", 
    "what year was it made", "when was it produced", "when was it released", "manufacturing year", 
    "when was it built", "how many years old is it", "is it a recent model", "is it an old model", 
    "is it from this year", "was it released this year", "is it the latest model", 
    "is it an older version", "is it a previous generation", "which year was it launched", 
    "does it belong to the new generation", "what’s the production date", "is it outdated", 
    "is it still a current model", "how long has it been out", "how long has it been on the market",
    "is it still being produced", "is it discontinued", "is it a classic model", 
    "is it vintage", "is it from last year", "was it released recently", 
    "is this an older release", "what’s the model’s age", "is it a first-generation model", 
    "when did this model first come out", "when was this version introduced", 
    "when was the first release", "which year’s edition is this", "is this an anniversary edition", 
    "is it the latest version or an old one", "is it still a good model for its year",
    "does it follow the latest trends", "how long will it stay relevant", 
    "was this the top model in its year", "is this an upgrade from last year’s model", 
    "what’s the exact release year", "what’s the official production year", 
    "does the model still receive updates", "is this year’s model better than the previous one", 
    "is it still worth buying this year", "has it been updated since its release", 
    "is it the newest version available", 
    "does it come with the latest features for its year", "how many generations old is it", 
    "is it a last-year model", "is it from this decade", 
    "is it still modern", "is it still competitive for its year", 
    "is this model still being manufactured", "is this a limited edition for a specific year", 
    "is there a newer version available", "was it popular in its release year", 
    "what year did they stop making it",
    "does it match the new technology standards"]
    condition_keywords = ["condition", "is it new", "is it used", "used or new", "is it in good condition", "product condition?", 
    "status of this?", "what condition?", "is it like new?", "is it brand new?", "is it slightly used?", 
    "how worn is it?", "is it in perfect condition?", "does it have any scratches?", "does it have any dents?", 
    "any visible damage?", "any defects?", "any issues with it?", "is it in working condition?", 
    "is it still functional?", "does it work perfectly?", "does it need any repairs?", "is it damaged?", 
    "is it refurbished?", "is it factory refurbished?", "is it an open-box item?", "is it second-hand?", 
    "how much has it been used?", "has it been repaired before?", "is it in excellent shape?", 
    "is it well-maintained?", "does it look new?", "does it have any missing parts?", "is anything broken?", 
    "does it have original parts?", "does it come with original packaging?", "is it sealed?", 
    "is it pre-owned?", "does it show signs of wear?", "is there any wear and tear?", "does it need fixing?", 
    "is it fully operational?", "is everything intact?", "is there any fading?", "does it have all accessories?", 
    "are there any cracks?", "does it have original labels?", "any marks or stains?", "is it scratch-free?", 
    "does it work as expected?", "any functionality problems?", "does it overheat?", "does it have a warranty?", 
    "is it still under warranty?", "how old is it?", "has it been serviced?", "has it been tested?", 
    "any performance issues?", "does it run smoothly?", "any buttons not working?", "does it have any rust?", 
    "any color fading?", "is it waterproof?", "does it need maintenance?", "is it fragile?", 
    "has it been dropped?", "any loose parts?", "does it need replacement parts?", "any dead pixels?", 
    "is the battery still good?", "does the battery last long?", "does the screen have scratches?", 
    "does it charge properly?", "any dents on the body?", "any paint chipping?", "any structural damage?", 
    "is it in mint condition?", "is it in decent shape?", "does it look used?", "has it been cleaned?", 
    "does it come with a case?", "is it factory reset?", "does it have software issues?", 
    "any history of repairs?", "is it still strong?", "is it reliable?", "is there any weakness?", 
    "how sturdy is it?", "how fresh does it look?", "does it still look nice?", "is it worn out?", 
    "has it been in storage for a long time?", "has it been kept in good condition?", "does it have any upgrades?", 
    "is it partially damaged?", "can I see photos of its condition?", "has it been well taken care of?", 
    "any noticeable flaws?", "has it been exposed to water?", "does it have a clean history?", 
    "does it need tuning?", "how was it used before?", "how’s the exterior condition?", "is the material still good?",
    "does it need repainting?", "does it work without problems?", "how's the general wear?", 
    "is there any hidden damage?", "does it still look stylish?", "is there any internal damage?"]

    if any(word in user_input for word in year_keywords):
        return f"This product is from {year_model}. It's in {condition} condition."

    if any(word in user_input for word in model_keywords):
        return f"The model is {title}. It comes with {description}."

    if any(word in user_input for word in condition_keywords):
        return f"This product is in {condition} condition."

    return None

# ✅ GESTION DES DEMANDES DE VISITE SANS DEAL CONFIRMÉ
def handle_visit_request(user_input, user_phone):
    """
    Permet aux acheteurs de demander à visiter sans avoir confirmé un deal.
    Fournit les informations essentielles et laisse la conversation évoluer naturellement.
    """
    visit_keywords = ["visit", "pass", "can I check", "can I see", "can I take a look", "pick up", 
    "I want to collect", , "can I pass by", "can I come", "can I visit", 
    "can I check it out", "where can I see it", "can I take a look before buying", 
    "can I test it", "can I hold it in my hands", "where is it available", 
    "can I drop by", "can I come over", "where to collect", "is it possible to check in person", 
    "is it available for viewing", "can I take a closer look", "can I come and see", 
    "can I come to your place", "where can I come", "is there a showroom", 
    "where can I pick it up", "is pick-up possible", "can I come and collect", 
    "do you offer pick-up", "do you allow pick-up", "where can I pick it up from", 
    "where do I have to go", "where do I need to come", "what is the location for pick-up",
    "can I inspect it", "can I see it in real life", "where are you located", 
    "can I check the condition in person", "where is the meet-up point", 
    "is meet-up possible", "where can we meet", "can I schedule a visit", 
    "can I arrange a meeting", "is it possible to come over", "can we meet for inspection",
    "can I verify the product", "where can I check it", "do you allow personal inspection",
    "can I come now", "can I pass by today", "can I drop by tomorrow", 
    "is there a time for pick-up", "is self-pickup possible", "where do you usually meet buyers",
    "can I come to check before deciding", "do you have a physical location", 
    "can I see it before paying", "can I try it before purchase", "can I hold it to see how it feels",
    "do you have a store", "is there a pick-up location", "where is your place",
    "how far are you", "can we arrange a meet-up", "do you meet buyers", "is it okay if I come",
    "is pick-up free", "do I need an appointment for pick-up", "can I check it out today",
    "is viewing available", "do you have a time for me to visit", "can I touch and feel it",
    "do you allow meet-ups", "do you meet customers", "do I need to book a time", 
    "can I drop by anytime", "do I need to bring anything for pick-up", "where is the collection point"]
    
    if any(word in user_input for word in visit_keywords):
        return (
            f"Product: {title}\n"
            f"Price: {price}\n\n"
            f"Would you like to choose a pick-up?"
        )

    if user_input in ["yes", "interested", "i want to come", "i confirm"]:
        return propose_appointment_slots(user_phone)

    return None

# ✅ GESTION DES PRIX ET NÉGOCIATIONS
def convert_price_format(price_str):
    """Convertit une offre de prix en valeur entière"""
    price_str = price_str.lower().replace("qar", "").replace(",", "").strip()
    
    if re.search(r'\b(202[0-9])\b', price_str) or re.search(r'\b(\d{1,2})\s?(am|pm)\b', price_str):
        return None  

    match = re.search(r'(\d+\.?\d*)k', price_str)
    if match:
        return int(float(match.group(1)) * 1000)

    match = re.search(r'\b\d+\b', price_str)
    if match:
        return int(match.group(0))

    return None

def handle_price_negotiation(user_input, user_phone):
    """Gère la négociation des prix"""
    offer = convert_price_format(user_input)
    
    if offer is not None:
        if offer < min_price:
            return random.choice([
                f"Too low, it's in great condition!",
                f"Sorry, {offer} QAR is too low.",
                f"Can't accept that, too low.",
                f"Looking for a better offer.",
                f"That’s below expectations.",
                f"Need a higher price.",
                f"Not enough, can you go higher?"
            ])
        elif offer >= min_price:
            confirmed_deals[user_phone] = offer
            return random.choice([
                f"Great! {offer} QAR deal confirmed.",
                f"Alright, {offer} QAR agreed.",
                f"Done! {offer} QAR is fine.",
                f"Confirmed at {offer} QAR.",
                f"Deal, {offer} QAR works."
            ]) + " Please check my availability." + propose_appointment_slots(user_phone)

    if "last price" in user_input or "final price" in user_input or "price" in user_input or "cost" in user_input or "negotiable" in user_input or "discount" in user_input:
        return random.choice([
            f"I'm looking for around {price}, but open to reasonable offers.",
            f"The price is negotiable but around {price}.",
            f"I'm considering offers close to {price}.",
            f"The expected price is {price}, but let's discuss!"
        ])

    return None

# ✅ GESTION DES CRÉNEAUX ET RENDEZ-VOUS
def propose_appointment_slots(user_phone):
    """Propose des créneaux de rendez-vous après confirmation d'un deal ou d'une demande de visite"""
    if user_phone in scheduled_appointments:
        return None  

    slots_text = "\n".join([f"- {slot}" for slot in available_slots])

    message_body = (
        f"{slots_text}\n\n"
        f"To confirm your visit, reply directly to this number:\n"
        f"{seller_contact}\n"
        f"Location: {location}"
    )

    try:
        twilio_client.messages.create(
            from_="whatsapp:+14155238886",
            to=f"whatsapp:{user_phone}",
            body=message_body
        )
        
        # ✅ Envoi d'une fiche de contact WhatsApp
        twilio_client.messages.create(
            from_="whatsapp:+14155238886",
            to=f"whatsapp:{user_phone}",
            body=f"📞 Save the seller's contact for easy communication: wa.me/{seller_contact.replace('+', '')}"
        )

        return "I've sent you the available pick-up slots. Please reply to the seller with your choice."
    
    except Exception as e:
        print(f"⚠️ Twilio Error: {e}")
        return message_body  

# ✅ GESTION DES SALUTATIONS
def handle_greetings(user_input):
    greetings = ["hi", "hello", "hey", "bonjour", "salam", "salut", 
                "good morning", "good evening", "good afternoon", 
                "hey there", "hi there", "hello there", "greetings", 
                "morning", "evening", "afternoon", 
                "how are you?", "how’s it going?", "hope you're well", 
                "hope you're doing good", "hope you're doing well", 
                "nice to meet you", "pleased to meet you", 
                "quick question", "i’m interested", "interested?", 
                "can I ask something?", 
                "is this still for sale?", "good day", "hey, got a minute?"]

    if any(greet in user_input for greet in greetings):
        return random.choice([
            "Hello! How can I help you?", "Hi there! What can I do for you?", "Hey! Need any help?", 
            "Salam! How can I assist you?", "Wa Alaikum Salam! How may I help you?", "Hi! How can I assist you?"
        ])
    return None

# ✅ FONCTION PRINCIPALE DU CHATBOT
def handle_user_query(user_input, user_phone):
    """Analyse le message utilisateur et répond en conséquence"""
    user_input = unidecode.unidecode(user_input.strip().lower())

    if user_phone not in user_conversations:
        user_conversations[user_phone] = []
    user_conversations[user_phone].append(user_input)

    return (
        handle_product_info(user_input) or
        handle_visit_request(user_input, user_phone) or
        handle_price_negotiation(user_input, user_phone) or
        handle_greetings(user_input) or
        random.choice(["I didn’t get that.", "Can you clarify?", "Sorry, what do you mean?", "Could you rephrase?", "Not sure I understood."])
    )


